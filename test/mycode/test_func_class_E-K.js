import assert from 'assert'
import * as myfunc from "./myfunc";
import {ISBLANK} from '../../src/calc/expression_fn/lib/information';
import {
    CellVEmpty,
    CellVError,
    CellVBool,
    CellVString,
    CellVNumber,
    CellVDateTime
} from '../../src/calc/cell_value_type/cell_value';
import {RawValue} from '../../src/calc/calc_data_proxy/syntax_unit_raw_value';
import {easySolve} from '../../src/calc/calc_data_proxy/exp_fn_executor';
import * as date_time from '../../src/calc/expression_fn/lib/date_time'
import * as statistical from '../../src/calc/expression_fn/lib/statistical'
import * as mathtrig from '../../src/calc/expression_fn/lib/math-trig'
import * as financial from '../../src/calc/expression_fn/lib/financial'
import * as logical from '../../src/calc/expression_fn/lib/logical'
import * as text from '../../src/calc/expression_fn/lib/text'
import * as engineering from '../../src/calc/expression_fn/lib/engineering'
import * as database from '../../src/calc/expression_fn/lib/database'
import {ERROR_DIV0, ERROR_NA, ERROR_NUM, ERROR_VALUE} from "../../src/calc/calc_utils/error_config";
import * as information from '../../src/calc/expression_fn/lib/information'

describe('expression_fn integration', function () {
    describe('func', function () {
        it('EDATE', function () {
            let res1 = easySolve(date_time.EDATE, ['2011-1-15', 1])
            console.log(res1)
            let res2 = easySolve(date_time.EDATE, ['2011-1-15', -1])
            console.log(res2)
            let res3 = easySolve(date_time.EDATE, ['2011-1-15', 2])
            console.log(res3)
        })
        it('EFFECT', function () {
            let res1 = easySolve(financial.EFFECT, [0.0525, 4])
            console.log(res1)
            assert(Math.abs(res1 - 0.0535427) < 0.001)
            let res2 = easySolve(financial.EFFECT, [-0.0525, 4])
            console.log(res2)
            assert.equal(res2.message, ERROR_NUM)
        })
        it('EOMONTH', function () {
            let res1 = easySolve(date_time.EOMONTH, ['2011-1-1', 1])
            console.log(res1)
            let res2 = easySolve(date_time.EOMONTH, ['2011-1-1', -3])
            console.log(res2)
        })
        it('ERF', function () {
            let res1 = easySolve(engineering.ERF, [0.745])
            console.log(res1)
            assert(Math.abs(res1 - 0.70792892) < 0.001)
            let res2 = easySolve(engineering.ERF, [1])
            console.log(res2)
            assert(Math.abs(res2 - 0.84270079) < 0.001)
            let res3 = easySolve(engineering.ERF, [1, 2])
            console.log(res3)
            assert(Math.abs(res3 - 0.152621472) < 0.001)
        })
        it('ERFC', function () {
            let res1 = easySolve(engineering.ERFC, [1])
            console.log(res1)
            assert(Math.abs(res1 - 0.15729921) < 0.001)
        })
        it('ERROR.TYPE', function () {
            let res1 = easySolve(information.ERROR.TYPE, ['#NULL!'])
            console.log(res1)
            assert.equal(res1, 1)
            let res2 = easySolve(information.ERROR.TYPE, ['#NAME?'])
            console.log(res2)
            assert.equal(res2, 5)
        })
        it('EVEN', function () {
            let res1 = easySolve(mathtrig.EVEN, [1.5])
            console.log(res1)
            assert.equal(res1, 2)
            let res2 = easySolve(mathtrig.EVEN, [3])
            console.log(res2)
            assert.equal(res2, 4)
            let res3 = easySolve(mathtrig.EVEN, [2])
            console.log(res3)
            assert.equal(res3, 2)
            let res4 = easySolve(mathtrig.EVEN, [-1])
            console.log(res4)
            assert.equal(res4, -2)
        })
        it('EXACT', function () {
            let res1 = easySolve(text.EXACT, ['word', 'word'])
            console.log(res1)
            assert.equal(res1, true)
            let res2 = easySolve(text.EXACT, ['Word', 'word'])
            console.log(res2)
            assert.equal(res2, false)
            let res3 = easySolve(text.EXACT, ['w ord', 'word'])
            console.log(res3)
            assert.equal(res3, false)
        })
        it('EXP', function () {
            let res1 = easySolve(mathtrig.EXP, [1])
            console.log(res1)
            assert(Math.abs(res1 - 2.71828183) < 0.001)
            let res2 = easySolve(mathtrig.EXP, [2])
            console.log(res2)
            assert(Math.abs(res2 - 7.3890561) < 0.001)
        })
        it('EXPON.DIST', function () {
            let res1 = easySolve(statistical.EXPON.DIST, [0.2, 10, 'true'])
            console.log(res1)
            assert(Math.abs(res1 - 0.86466472) < 0.001)
            let res2 = easySolve(statistical.EXPON.DIST, [0.2, 10, 'false'])
            console.log(res2)
            assert(Math.abs(res2 - 1.35335283) < 0.001)
            let res3 = easySolve(statistical.EXPON.DIST, [0.2, -10, 'false'])
            console.log(res3)
            assert.equal(res3.message, ERROR_NUM)
        })
        it('F.DIST', function () {
            let res1 = easySolve(statistical.F.DIST, [15.2069, 6, 4, 'TRUE'])
            console.log(res1)
            assert(Math.abs(res1 - 0.99) < 0.001)
            let res2 = easySolve(statistical.F.DIST, [15.2069, 6, 4, 'FALSE'])
            console.log(res2)
            assert(Math.abs(res2 - 0.0012238) < 0.001)
            let res3 = easySolve(statistical.F.DIST, ['AAA', 6, 4, 'FALSE'])
            console.log(res3)
            assert.equal(res3.message, ERROR_VALUE)
        })
        it('F.DIST.RT', function () {
            let res1 = easySolve(statistical.F.DIST.RT, [15.2069, 6, 4])
            console.log(res1)
            assert(Math.abs(res1 - 0.01) < 0.001)
            let res2 = easySolve(statistical.F.DIST.RT, ['AAA', 6, 4])
            console.log(res2)
            assert.equal(res2.message, ERROR_VALUE)
        })
        it('F.INV', function () {
            let res1 = easySolve(statistical.F.INV, [0.01, 6, 4])
            console.log(res1)
            assert(Math.abs(res1 - 0.10930991) < 0.001)
            let res2 = easySolve(statistical.F.INV, [-0.01, 6, 4])
            console.log(res2)
            assert.equal(res2.message, ERROR_NUM)
            let res3 = easySolve(statistical.F.INV, [0.01, 0.6, 4])
            console.log(res3)
            assert.equal(res3.message, ERROR_NUM)
            let res4 = easySolve(statistical.F.INV, [0.5, 8, 5])
            console.log(res4)
            assert(Math.abs(res4 - 1.054509625) < 0.001)
        })
        it('F.INV.RT', function () {
            let res1 = easySolve(statistical.F.INV.RT, [0.01, 6, 4])
            console.log(res1)
            assert(Math.abs(res1 - 15.20686) < 0.001)
            let res2 = easySolve(statistical.F.INV.RT, [-0.01, 6, 4])
            console.log(res2)
            assert.equal(res2.message, ERROR_NUM)
        })
        it('FACT', function () {
            let res1 = easySolve(mathtrig.FACT, [5])
            console.log(res1)
            assert.equal(res1, 120)
            let res2 = easySolve(mathtrig.FACT, [1.9])
            console.log(res2)
            assert.equal(res2, 1)
            let res3 = easySolve(mathtrig.FACT, [0])
            console.log(res3)
            assert.equal(res3, 1)
            let res4 = easySolve(mathtrig.FACT, [-1])
            console.log(res4)
            assert.equal(res4.message, ERROR_NUM)
            let res5 = easySolve(mathtrig.FACT, [1])
            console.log(res5)
            assert.equal(res5, 1)
        })
        it('FACTDOUBLE', function () {
            let res1 = easySolve(mathtrig.FACTDOUBLE, [6])
            console.log(res1)
            assert.equal(res1, 48)
            let res2 = easySolve(mathtrig.FACTDOUBLE, [7])
            console.log(res2)
            assert.equal(res2, 105)
            let res3 = easySolve(mathtrig.FACTDOUBLE, [-8.5])
            console.log(res3)
            assert.equal(res3.message, ERROR_NUM)
        })
        it('FIND', function () {
            let res1 = easySolve(text.FIND, ['M', 'Miriam McGovern'])
            console.log(res1)
            assert.equal(res1, 1)
            let res2 = easySolve(text.FIND, ['m', 'Miriam McGovern'])
            console.log(res2)
            assert.equal(res2, 6)
            let res3 = easySolve(text.FIND, ['M', 'Miriam McGovern', 3])
            console.log(res3)
            assert.equal(res3, 8)
        })
        it('FISHER', function () {
            let res1 = easySolve(statistical.FISHER, [0.75])
            console.log(res1)
            assert(Math.abs(res1 - 0.9729551) < 0.001)
            let res2 = easySolve(statistical.FISHER, [10])
            console.log(res2)
            assert.equal(res2.message, ERROR_NUM)
        })
        it('FISHERINV', function () {
            let res1 = easySolve(statistical.FISHERINV, [0.972955])
            console.log(res1)
            assert(Math.abs(res1 - 0.75) < 0.001)
            let res2 = easySolve(statistical.FISHERINV, ['aaa'])
            console.log(res2)
            assert.equal(res2.message, ERROR_VALUE)
        })
        it('FLOORMATH', function () {
            let res1 = easySolve(mathtrig.FLOORMATH, [24.3, 5])
            console.log(res1)
            assert.equal(res1, 20)
            let res2 = easySolve(mathtrig.FLOORMATH, [6.7])
            console.log(res2)
            assert.equal(res2, 6)
            let res3 = easySolve(mathtrig.FLOORMATH, [-8.1, 2])
            console.log(res3)
            assert.equal(res3, -10)
            let res4 = easySolve(mathtrig.FLOORMATH, [-5.5, 2, -1])
            console.log(res4)
            assert.equal(res4, -4)
        })
        it('FLOORPRACE', function () {
            let res1 = easySolve(mathtrig.FLOORPRACE, [24.3, 5])
            console.log(res1)
            assert.equal(res1, 20)
            let res2 = easySolve(mathtrig.FLOORPRACE, [6.7])
            console.log(res2)
            assert.equal(res2, 6)
            let res3 = easySolve(mathtrig.FLOORPRACE, [-8.1, 2])
            console.log(res3)
            assert.equal(res3, -10)
            let res4 = easySolve(mathtrig.FLOORPRACE, [-5.5, 2, -1])
            console.log(res4)
            assert.equal(res4, -4)
        })
        it('FORECAST', function () {
            let res1 = easySolve(statistical.FORECAST, [30, [6, 7, 9, 15, 26], [20, 28, 30, 38, 40]])
            console.log(res1)
            assert(Math.abs(res1 - 11.5398773) < 0.001)
        })
        it('FV', function () {
            let res1 = easySolve(financial.FV, [0.06, 10, -200, -500, 1])
            console.log(res1)
            assert(Math.abs(res1 - 3689.752376) < 0.001)
            let res2 = easySolve(financial.FV, [0.06, 10, -200, -500])
            console.log(res2)
            assert(Math.abs(res2 - 3531.582837) < 0.001)
        })
        it('FVSCHEDULE', function () {
            let res1 = easySolve(financial.FVSCHEDULE, [1, [0.09, 0.11, 0.1]])
            console.log(res1)
            assert(Math.abs(res1 - 1.3309) < 0.001)
        })
        it('GAMMA', function () {
            let res1 = easySolve(statistical.GAMMA, [2.5])
            console.log(res1)
            assert(Math.abs(res1 - 1.329) < 0.001)
            let res2 = easySolve(statistical.GAMMA, [-3.75])
            console.log(res2)
            assert(Math.abs(res2 - 0.267866) < 0.001)
            let res3 = easySolve(statistical.GAMMA, [0])
            console.log(res3)
            assert.equal(res3.message, ERROR_NUM)
            let res4 = easySolve(statistical.GAMMA, ['AAA'])
            console.log(res4)
            assert.equal(res4.message, ERROR_VALUE)
        })
        it('GAMMA.DIST', function () {
            let res1 = easySolve(statistical.GAMMA.DIST, [10.00001131, 9, 2, 'FALSE'])
            console.log(res1)
            assert(Math.abs(res1 - 0.03263913) < 0.001)
            let res2 = easySolve(statistical.GAMMA.DIST, [10.00001131, 9, 2, 'TRUE'])
            console.log(res2)
            assert(Math.abs(res2 - 0.068094004) < 0.001)
        })
        it('GAMMA.INV', function () {
            let res1 = easySolve(statistical.GAMMA.INV, [0.068094, 9, 2])
            console.log(res1)
            assert(Math.abs(res1 - 10.0000112) < 0.001)
            let res2 = easySolve(statistical.GAMMA.INV, [-10.00001131, 9, 2])
            console.log(res2)
            assert.equal(res2.message, ERROR_NUM)
        })
        it('GAMMALN', function () {
            let res1 = easySolve(statistical.GAMMALN, [4])
            console.log(res1)
            assert(Math.abs(res1 - 1.7917595) < 0.001)
            let res2 = easySolve(statistical.GAMMALN, [-10])
            console.log(res2)
            assert.equal(res2.message, ERROR_NUM)
        })
        it('GAMMALN.PRECISE', function () {
            let res1 = easySolve(statistical.GAMMALN.PRECISE, [4])
            console.log(res1)
            assert(Math.abs(res1 - 1.7917595) < 0.001)
            let res2 = easySolve(statistical.GAMMALN.PRECISE, [-10])
            console.log(res2)
            assert.equal(res2.message, ERROR_NUM)
        })
        it('GAUSS', function () {
            let res1 = easySolve(statistical.GAUSS, [2])
            console.log(res1)
            assert(Math.abs(res1 - 0.47725) < 0.001)
            let res2 = easySolve(statistical.GAUSS, ['aaaaa'])
            console.log(res2)
            assert.equal(res2.message, ERROR_VALUE)
        })
        it('GCD', function () {
            let res1 = easySolve(mathtrig.GCD, [5, 2])
            console.log(res1)
            assert.equal(res1, 1)
            let res2 = easySolve(mathtrig.GCD, [2, -6])
            console.log(res2)
            assert.equal(res2.message, ERROR_NUM)
            let res3 = easySolve(mathtrig.GCD, [15, 105, 95])
            console.log(res3)
            assert.equal(res3, 5)
        })
        it('GEOMEAN', function () {
            let res1 = easySolve(statistical.GEOMEAN, [4, 5, 8, 7, 11, 4, 3])
            console.log(res1)
            assert(Math.abs(res1 - 5.476987) < 0.001)
            let res2 = easySolve(statistical.GEOMEAN, [15, -105, 95])
            console.log(res2)
            assert.equal(res2.message, ERROR_NUM)
        })
        it('GESTEP', function () {
            let res1 = easySolve(engineering.GESTEP, [5, 4])
            console.log(res1)
            assert.equal(res1, 1)
            let res2 = easySolve(engineering.GESTEP, [5, 5])
            console.log(res2)
            assert.equal(res2, 1)
            let res3 = easySolve(engineering.GESTEP, [-4, -5])
            console.log(res3)
            assert.equal(res3, 1)
            let res4 = easySolve(engineering.GESTEP, [-1])
            console.log(res4)
            assert.equal(res4, 0)
        })
        it('HARMEAN', function () {
            let res1 = easySolve(statistical.HARMEAN, [4, 5, 8, 7, 11, 4, 3])
            console.log(res1)
            assert(Math.abs(res1 - 5.028376) < 0.001)
            let res2 = easySolve(statistical.HARMEAN, [15, -105, 95])
            console.log(res2)
            assert.equal(res2.message, ERROR_NUM)
        })
        it('HEX2BIN', function () {
            let res1 = easySolve(engineering.HEX2BIN, ['F', 8])
            console.log(res1)
            assert.equal(res1, '00001111')
            let res2 = easySolve(engineering.HEX2BIN, ['B7'])
            console.log(res2)
            assert.equal(res2, '10110111')
            let res3 = easySolve(engineering.HEX2BIN, ['FFFFFFFFFF'])
            console.log(res3)
            assert.equal(res3, '1111111111')
            let res4 = easySolve(engineering.HEX2BIN, ['FF1FFFFFFFF'])
            console.log(res4)
            assert.equal(res4.message, ERROR_NUM)
            let res5 = easySolve(engineering.HEX2BIN, ['FFFFFFFFFF', -1])
            console.log(res5)
            assert.equal(res5.message, ERROR_NUM)
        })
        it('HEX2DEC', function () {
            let res1 = easySolve(engineering.HEX2DEC, ['A5'])
            console.log(res1)
            assert.equal(res1, 165)
            let res2 = easySolve(engineering.HEX2DEC, ['FFFFFFFF5B'])
            console.log(res2)
            assert.equal(res2, -165)
            let res3 = easySolve(engineering.HEX2DEC, ['3DA408B9'])
            console.log(res3)
            assert.equal(res3, '1034160313')
            let res4 = easySolve(engineering.HEX2DEC, ['FF1FASFAFFFFF'])
            console.log(res4)
            assert.equal(res4.message, ERROR_NUM)
        })
        it('HEX2OCT', function () {
            let res1 = easySolve(engineering.HEX2OCT, ['F', 3])
            console.log(res1)
            assert.equal(res1, '017')
            let res2 = easySolve(engineering.HEX2OCT, ['3B4E'])
            console.log(res2)
            assert.equal(res2, 35516)
            let res3 = easySolve(engineering.HEX2OCT, ['FFFFFFFF00'])
            console.log(res3)
            assert.equal(res3, 7777777400)
            let res4 = easySolve(engineering.HEX2OCT, ['3B4E', -1])
            console.log(res4)
            assert.equal(res4.message, ERROR_NUM)
        })
        it('HOUR', function () {
            let res1 = easySolve(date_time.HOUR, [0.75])
            console.log(res1)
            assert.equal(res1, 18)
            let res2 = easySolve(date_time.HOUR, ['2011-7-18 7:45'])
            console.log(res2)
            assert.equal(res2, 7)
            let res3 = easySolve(date_time.HOUR, ['2012-4-21'])
            console.log(res3)
            assert.equal(res3, 0)
        })
        it('HYPGEOM.DIST', function () {
            let res1 = easySolve(statistical.HYPGEOM.DIST, [1, 4, 8, 20, 'TRUE'])
            console.log(res1)
            assert(Math.abs(res1 - 0.4654) < 0.001)
            let res2 = easySolve(statistical.HYPGEOM.DIST, [1, 4, 8, 20, 'false'])
            console.log(res2)
            assert(Math.abs(res2 - 0.3633) < 0.001)
            let res3 = easySolve(statistical.HYPGEOM.DIST, [1, 4, 8, -20, 'false'])
            console.log(res3)
            assert.equal(res3.message, ERROR_NUM)
        })
        it('IF', function () {
            let res1 = easySolve(logical.IF, ['yes=yes', 1, 2])
            console.log(res1)
            assert.equal(res1, 1)
        })
        it('IFERROR', function () {
            let res1 = easySolve(logical.IFERROR, [6, '计算中有错误'])
            console.log(res1)
            assert.equal(res1, 6)
            let res2 = easySolve(logical.IFERROR, [ERROR_DIV0, '计算中有错误'])
            console.log(res2)
            assert.equal(res2, '计算中有错误')
        })
        it('IFS', function () {
            let res1 = easySolve(statistical.IFS, ['true', 'A', 'true', 'B', 'true', 'C', 'true', 'D'])
            console.log(res1)
            assert.equal(res1, 'A')
        })
        it('IMABS', function () {
            let res1 = easySolve(engineering.IMABS, ['5+12i'])
            console.log(res1)
            assert.equal(res1, 13)
        })
        it('IMAGINARY', function () {
            let res1 = easySolve(engineering.IMAGINARY, ['3+4i'])
            console.log(res1)
            assert.equal(res1, 4)
            let res2 = easySolve(engineering.IMAGINARY, ['0-j'])
            console.log(res2)
            assert.equal(res2, -1)
            let res3 = easySolve(engineering.IMAGINARY, [4])
            console.log(res3)
            assert.equal(res3, 0)
        })
        it('IMARGUMENT', function () {
            let res1 = easySolve(engineering.IMARGUMENT, ['3+4i'])
            console.log(res1)
            assert(Math.abs(res1 - 0.92729522) < 0.001)
        })
        it('IMCONJUGATE', function () {
            let res1 = easySolve(engineering.IMCONJUGATE, ['3+4i'])
            console.log(res1)
            assert.equal(res1, '3-4i')
        })
        it('IMCOS', function () {
            let res1 = easySolve(engineering.IMCOS, ['1+i'])
            console.log(res1)
            assert.equal(res1, '0.8337300251311491-0.9888977057628651i')
        })
        it('IMCOSH', function () {
            let res1 = easySolve(engineering.IMCOSH, ['4+3i'])
            console.log(res1)
            assert.equal(res1, '-27.034945603074224+3.851153334811777i')
        })
        it('IMCOT', function () {
            let res1 = easySolve(engineering.IMCOT, ['4+3i'])
            console.log(res1)
            assert.equal(res1, '0.0049011823943044056-0.9992669278059017i')
            let res2 = easySolve(engineering.IMCOT, ['4-7A+3i'])
            console.log(res2)
            assert.equal(res2.message, ERROR_VALUE)
        })
        it('IMCSC', function () {
            let res1 = easySolve(engineering.IMCSC, ['4+3i'])
            console.log(res1)
            assert.equal(res1, '-0.0754898329158637+0.0648774713706355i')
        })
        it('IMCSCH', function () {
            let res1 = easySolve(engineering.IMCSCH, ['4+3i'])
            console.log(res1)
            assert.equal(res1, '-0.03627588962862602-0.005174473184019398i')
        })
        it('IMDIV', function () {
            let res1 = easySolve(engineering.IMDIV, ['-238+240i', '10+24i'])
            console.log(res1)
            assert.equal(res1, '5+12i')
        })
        it('IMEXP', function () {
            let res1 = easySolve(engineering.IMEXP, ['1+i'])
            console.log(res1)
            assert.equal(res1, '1.4686939399158851+2.2873552871788423i')
        })
        it('IMLN', function () {
            let res1 = easySolve(engineering.IMLN, ['3+4i'])
            console.log(res1)
            assert.equal(res1, '1.6094379124341003+0.9272952180016122i')
        })
        it('IMLOG10', function () {
            let res1 = easySolve(engineering.IMLOG10, ['3+4i'])
            console.log(res1)
            assert.equal(res1, '0.6989700043360187+0.4027191962733731i')
        })
        it('IMLOG2', function () {
            let res1 = easySolve(engineering.IMLOG2, ['3+4i'])
            console.log(res1)
            assert.equal(res1, '2.321928094887362+1.3378042124509761i')
        })
        it('IMPOWER', function () {
            let res1 = easySolve(engineering.IMPOWER, ['2+3i', 3])
            console.log(res1)
            assert.equal(res1, '-45.99999999999999+9.000000000000007i')
        })
        it('IMPRODUCT', function () {
            let res1 = easySolve(engineering.IMPRODUCT, ['3+4i', '5-3i'])
            console.log(res1)
            assert.equal(res1, '27+11i')
            let res2 = easySolve(engineering.IMPRODUCT, ['1+2i', 30])
            console.log(res2)
            assert.equal(res2, '30+60i')
        })
        it('IMREAL', function () {
            let res1 = easySolve(engineering.IMREAL, ['6-9i'])
            console.log(res1)
            assert.equal(res1, 6)
        })
        it('IMSEC', function () {
            let res1 = easySolve(engineering.IMSEC, ['4+3i'])
            console.log(res1)
            assert.equal(res1, '-0.06529402785794704-0.07522496030277322i')
        })
        it('IMSECH', function () {
            let res1 = easySolve(engineering.IMSECH, ['4+3i'])
            console.log(res1)
            assert.equal(res1, '-0.03625349691586887-0.005164344607753179i')
        })
        it('IMSIN', function () {
            let res1 = easySolve(engineering.IMSIN, ['4+3i'])
            console.log(res1)
            assert.equal(res1, '-7.61923172032141-6.5481200409110025i')
        })
        it('IMSINH', function () {
            let res1 = easySolve(engineering.IMSINH, ['4+3i'])
            console.log(res1)
            assert.equal(res1, '-27.016813258003932+3.853738037919377i')
        })
        it('IMSQRT', function () {
            let res1 = easySolve(engineering.IMSQRT, ['1+i'])
            console.log(res1)
            assert.equal(res1, '1.0986841134678098+0.45508986056222733i')
        })
        it('IMSUB', function () {
            let res1 = easySolve(engineering.IMSUB, ['13+4i', '5+3i'])
            console.log(res1)
            assert.equal(res1, '8+i')
        })
        it('IMSUM', function () {
            let res1 = easySolve(engineering.IMSUM, ['3+4i', '5-3i'])
            console.log(res1)
            assert.equal(res1, '8+i')
        })
        it('IMTAN', function () {
            let res1 = easySolve(engineering.IMTAN, ['4+3i'])
            console.log(res1)
            assert.equal(res1, '0.004908258067495992+1.000709536067233i')
        })
        it('INDEX', function () {
            let res1 = easySolve(text.INDEX, [[[1, 2], [3, 4]], 0, 2])
            console.log(res1)
            assert.equal(res1, 2)
        })
        it('INT', function () {
            let res1 = easySolve(mathtrig.INT, [8.9])
            console.log(res1)
            assert.equal(res1, 8)
            let res2 = easySolve(mathtrig.INT, [-8.9])
            console.log(res2)
            assert.equal(res2, -9)
        })
        it('INTERCEPT', function () {
            let res1 = easySolve(statistical.INTERCEPT, [[2, 3, 9, 1, 8], [6, 5, 11, 7, 5]])
            console.log(res1)
            assert(Math.abs(res1 - 0.0483871) < 0.001)
        })
        it('INTRATE', function () {
            let res1 = easySolve(financial.INTRATE, ['2008-2-15', 39583, 10000000, 10144200, 0])
            console.log(res1)
            assert(Math.abs(res1 - 0.05768) < 0.001)
            let res2 = easySolve(financial.INTRATE, [39493, 39583, 10000000, 10144200, 1])
            console.log(res2)
            assert(Math.abs(res2 - 0.058641333) < 0.001)
            let res3 = easySolve(financial.INTRATE, [39493, 39583, 10000000, 10144200, 2])
            console.log(res3)
            assert(Math.abs(res3 - 0.05768) < 0.001)
            let res4 = easySolve(financial.INTRATE, [39493, 39583, 10000000, 10144200, 3])
            console.log(res4)
            assert(Math.abs(res4 - 0.058481111) < 0.001)
            let res5 = easySolve(financial.INTRATE, [39493, '2008-5-15', 10000000, 10144200, 4])
            console.log(res5)
            assert(Math.abs(res5 - 0.05768) < 0.001)
        })
        it('ISBLANK', function () {
            let res3 = easySolve(information.ISBLANK, ['AA'])
            console.log(res3)
            assert.equal(res3, false)
        })
        it('ISERR', function () {
            let res1 = easySolve(information.ISERR, [ERROR_NA])
            console.log(res1)
            assert.equal(res1, true)
            let res2 = easySolve(information.ISERR, ['AA'])
            console.log(res2)
            assert.equal(res2, false)
        })
        it('ISERROR', function () {
            let res1 = easySolve(information.ISERROR, [ERROR_NA])
            console.log(res1)
            assert.equal(res1, true)
            let res2 = easySolve(information.ISERROR, ['AA'])
            console.log(res2)
            assert.equal(res2, false)
        })
        it('ISEVEN', function () {
            let res1 = easySolve(information.ISEVEN, [-1])
            console.log(res1)
            assert.equal(res1, false)
            let res2 = easySolve(information.ISEVEN, [2.5])
            console.log(res2)
            assert.equal(res2, true)
            let res3 = easySolve(information.ISEVEN, [5])
            console.log(res3)
            assert.equal(res3, false)
            let res4 = easySolve(information.ISEVEN, [0])
            console.log(res4)
            assert.equal(res4, true)
            let res5 = easySolve(information.ISEVEN, ['2011-12-23'])
            console.log(res5)
            assert.equal(res5, true)
        })
        it('ISNA', function () {
            let res1 = easySolve(information.ISNA, [ERROR_NA])
            console.log(res1)
            assert.equal(res1, true)
            let res2 = easySolve(information.ISNA, ['AA'])
            console.log(res2)
            assert.equal(res2, false)
            let res3 = easySolve(information.ISNA, [ERROR_VALUE])
            console.log(res3)
            assert.equal(res3, false)
        })
        it('ISNONTEXT', function () {
            let res1 = easySolve(information.ISNONTEXT, ['AA'])
            console.log(res1)
            assert.equal(res1, false)
            let res2 = easySolve(information.ISNONTEXT, [1111])
            console.log(res2)
            assert.equal(res2, true)
            let res3 = easySolve(information.ISNONTEXT, [])
            console.log(res3)
            assert.equal(res3, true)
        })
        it('ISNUMBER', function () {
            let res1 = easySolve(information.ISNUMBER, ['AA'])
            console.log(res1)
            assert.equal(res1, false)
            let res2 = easySolve(information.ISNUMBER, [111.1])
            console.log(res2)
            assert.equal(res2, true)
            let res3 = easySolve(information.ISNUMBER, [])
            console.log(res3)
            assert.equal(res3, false)
        })
        it('isoCEILING', function () {
            let res1 = easySolve(mathtrig.isoCEILING, [4.3])
            console.log(res1)
            assert.equal(res1, 5)
            let res2 = easySolve(mathtrig.isoCEILING, [-4.3])
            console.log(res2)
            assert.equal(res2, -4)
            let res3 = easySolve(mathtrig.isoCEILING, [4.3, 2])
            console.log(res3)
            assert.equal(res3, 6)
            let res4 = easySolve(mathtrig.isoCEILING, [4.3, -2])
            console.log(res4)
            assert.equal(res4, 6)
            let res5 = easySolve(mathtrig.isoCEILING, [-4.3, 2])
            console.log(res5)
            assert.equal(res5, -4)
            let res6 = easySolve(mathtrig.isoCEILING, [-4.3, -2])
            console.log(res6)
            assert.equal(res6, -4)
        })
        it('ISODD', function () {
            let res1 = easySolve(information.ISODD, [-1])
            console.log(res1)
            assert.equal(res1, true)
            let res2 = easySolve(information.ISODD, [2.5])
            console.log(res2)
            assert.equal(res2, false)
            let res3 = easySolve(information.ISODD, [5])
            console.log(res3)
            assert.equal(res3, true)
        })
        it('ISOWEEKNUM', function () {
            let res1 = easySolve(date_time.ISOWEEKNUM, ['2012-3-9'])
            console.log(res1)
            assert.equal(res1, 10)
            let res2 = easySolve(date_time.ISOWEEKNUM, ['212121'])
            console.log(res2)
            assert.equal(res2.message, ERROR_VALUE)
            let res3 = easySolve(date_time.ISOWEEKNUM, [-555])
            console.log(res3)
            assert.equal(res3.message, ERROR_NUM)
        })
        it('ISPMT', function () {
            let res1 = easySolve(financial.ISPMT, [0.1, 0, 4, 4000])
            console.log(res1)
            assert.equal(res1, -400)
            let res2 = easySolve(financial.ISPMT, [0.1, 0, -4, -1000])
            console.log(res2)
            assert.equal(res2, 100)
        })
        it('ISTEXT', function () {
            let res1 = easySolve(information.ISTEXT, ['AA'])
            console.log(res1)
            assert.equal(res1, true)
            let res2 = easySolve(information.ISTEXT, [1111])
            console.log(res2)
            assert.equal(res2, false)
            let res3 = easySolve(information.ISTEXT, [])
            console.log(res3)
            assert.equal(res3, false)
        })
        it('ISREF', function () {
            let res1 = easySolve(information.ISREF, ['AA'])
            console.log(res1)
            assert.equal(res1, true)
            let res2 = easySolve(information.ISREF, [1111])
            console.log(res2)
            assert.equal(res2, true)
            let res3 = easySolve(information.ISREF, [])
            console.log(res3)
            assert.equal(res3, false)
        })
        it('KURT', function () {
            let res1 = easySolve(statistical.KURT, [3, 4, 5, 2, 3, 4, 5, 6, 4, 7])
            console.log(res1)
            assert(Math.abs(res1 - (-0.151799637)) < 0.001)
            let res2 = easySolve(statistical.KURT, [1, 1, 1])
            console.log(res2)
            assert.equal(res2.message, ERROR_DIV0)
        })


    })
})